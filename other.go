//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
package libcore
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
import (
//	"fmt"
	"bytes"
	"errors"
)
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
// [9 8 7 6 5 4 3 2 1], 0, 20 -> [9 8 7 6 5 4 3 2 1]
// [9 8 7 6 5 4 3 2 1], 0, 9  -> [9 8 7 6 5 4 3 2 1]
// [9 8 7 6 5 4 3 2 1], 0, 8  -> [9 8 7 6 5 4 3 2]
// [9 8 7 6 5 4 3 2 1], 1, 8  ->   [8 7 6 5 4 3 2 1]
// [9 8 7 6 5 4 3 2 1], 2, 8  ->     [7 6 5 4 3 2 1]
// [9 8 7 6 5 4 3 2 1], 2, 9  ->     [7 6 5 4 3 2 1]
// [9 8 7 6 5 4 3 2 1], 2, -1 ->     [7 6 5 4 3 2 1]
func SubByte(buf []byte, start_index int, size int) []byte {
	tmp := []byte{}


	if start_index < 0 {
		return tmp
	}


	if start_index >= len(buf) {
		return tmp
	}


	if (size == -1) {
		size = len(buf) - start_index
	}


	if (start_index + size) >= len(buf) {
		size = len(buf) - start_index
	}


	stop_index := start_index + size


//	for i := start_index; i < stop_index; i++ {
//		tmp = append(tmp, buf[i])
//	}
//	return tmp


	return buf[start_index:stop_index]
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
func SubByteTest() (err error) {
	var x []byte
	var y []byte
	var z []byte


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 0, 20)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test01")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 0, 9)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test02")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{9, 8, 7, 6, 5, 4, 3, 2}
	z = SubByte(x, 0, 8)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test03")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{8, 7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 1, 8)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test04")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 2, 8)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test05")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 2, 9)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test06")
		return
	}


	x = []byte{9, 8, 7, 6, 5, 4, 3, 2, 1}
	y = []byte{7, 6, 5, 4, 3, 2, 1}
	z = SubByte(x, 2, -1)
	if bytes.Compare(y, z) != 0 {
		err = errors.New("test07")
		return
	}


	return
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
func SubStr(buf string, start_index int, size int) string {
	return string(SubByte([]byte(buf), start_index, size))
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
/*
func main() {
	err := SubByteTest()
	if err != nil {
		fmt.Printf("ERROR: %v\n", err)
	} else {
		fmt.Printf("done\n")
	}
}
*/
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
